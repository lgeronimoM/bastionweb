---
# tasks file for roles/addCustomUsers

######################### agregar usuario con PEM file y google  ############################

- name: crear directorio de respaldos tipo cliente
  file:
    path: "{{ dirfile }}"
    owner: "{{ admin_user }}"
    group: "{{ admin_user }}"
    state: directory
  delegate_to: "{{ serverapp }}"
  tags: adduser-mfa

- name: Creando el nuevo usuario {{ usuario }} con ssh-keygen tipo cliente
  user:
    name: "{{ usuario }}"
    #group: "{{ usuario }}"
    comment: encontrack sa de cv
    generate_ssh_key: yes
    ssh_key_comment: encontrack
    #ssh_key_passphrase: "{{ usuario }}"
    ssh_key_type: rsa
    ssh_key_bits: 4096
    ssh_key_file: "/home/{{ usuario }}/.ssh/{{ namekey }}_{{ usuario }}.pem"
  tags: adduser-mfa

- name: Respaldar archivo a mi servidor local private key tipo cliente
  fetch:
    src: "/home/{{ usuario }}/.ssh/{{ namekey }}_{{ usuario }}.pem"
    dest: "{{ dirfile }}/{{ namekey }}_{{ usuario }}.pem"
    flat: yes
    owner: "{{ admin_user }}"
    group: "{{ admin_user }}"
    mode: 600
  tags: adduser-mfa

- name: Respaldar archivo a mi servidor Local public key tipo cliente
  fetch:
    src: "/home/{{ usuario }}/.ssh/{{ namekey }}_{{ usuario }}.pem.pub"
    dest: "{{ dirfile }}/{{ namekey }}_{{ usuario }}.ppk"
    flat: yes
    owner: "{{ admin_user }}"
    group: "{{ admin_user }}"
    mode: 0600
  tags: adduser-mfa

- name: Gerando la autenticacion de archivo certificado bastion_hosts_{{ usuario }}.pem. tipo cliente
  authorized_key:
    user: "{{ usuario }}"
    state: present
    key: "{{ lookup('file', '{{ dirfile }}/{{ namekey }}_{{ usuario }}.ppk') }}"
  tags: adduser-mfa

- name: Generar Google-authenticator para {{ usuario }} tipo cliente
  command: "runuser -l {{ usuario }} -c 'echo $(google-authenticator -t -d -f -r 3 -R 30 -W) > /tmp/google-auth-{{ usuario }}.txt'"
  tags: adduser-mfa

- name: Respaldar archivo google-auth-{{ usuario }} en {{ dirgoogle }}
  fetch:
    src: "/tmp/google-auth-{{ usuario }}.txt"
    dest: "{{ dirgoogle }}/google-auth-{{ usuario }}.txt"
    owner: "{{ admin_user }}"
    group: "{{ admin_user }}"
    flat: yes
  tags: adduser-mfa

- name: Eliminar archivo /tmp/google-auth-{{ usuario }}.txt en remote host tipo cliente
  file:
    path: "/tmp/google-auth-{{ usuario }}.txt"
    state: absent
  tags: adduser-mfa

- name: Enviar archivo pem al usuario por mail tipo cliente
  mail:
    host: "{{ host_smtp }}"
    port: "{{ port_smtp }}"
    secure: starttls
    username: "{{ user_smtp }}"
    password: "{{ pass_smtp }}"
    from: "{{ user_smtp }}"
    to: "{{ email }}"
    subject: "Notificacion de alta cliente-bastion"
    body:  "Este es un correo para informarte que tu usuario {{ usuario }} fue dado de alta en el servidor bastion host con IP {{ ipbastion }} y su DNS publico {{ dnsbastion }}"
    attach: 
      - "{{ dirfile }}/{{ namekey }}_{{ usuario }}.pem"
      - "{{ dirgoogle }}/google-auth-{{ usuario }}.txt"
      - "{{ dirfiles }}/Manual_de_acceso_bastion.pdf"
  delegate_to: "{{ serverapp }}"
  tags: adduser-mfa

######################### Eliminar usuario cliente ############################

- name: Eliminar usuario {{ usuario }} 
  user:
    name: "{{ usuario }}"
    state: absent
    remove: yes
  tags: deluser-mfa

- name: Eliminar archivo private key
  delegate_to: "{{ serverapp }}"
  file: 
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ dirfile }}/{{ namekey }}_{{ usuario }}.pem"
    - "{{ dirfile }}/{{ namekey }}_{{ usuario }}.ppk"
    - "{{ dirgoogle }}/google-auth-{{ usuario }}.txt"
  tags: deluser-mfa

- name: Enviar confirmacion de baja de usuario 
  mail:
    host: "{{ host_smtp }}"
    port: "{{ port_smtp }}"
    secure: starttls
    username: "{{ user_smtp }}"
    password: "{{ pass_smtp }}"
    from: "{{ user_smtp }}"
    to: "{{ email }}"
    subject: "Baja del usuario {{ usuario }} en BastionHost."
    body:  "Se elimina el siguiente usuario {{ usuario }} tipo cliente-bastionHosts con IP {{ ipbastion }} y su DNS publico {{ dnsbastion }}."
  delegate_to: "{{ serverapp }}"
  tags: deluser-mfa

  ######################### Genera el reporte del usuario Server ############################

- name: Obtener el UID del usuario                                                                                                                                                                      
  shell: id -u {{ usuario }}                                                                                                                                                                            
  register: uid_result                                                                                                                                                                                  
  tags: report                                                                                                                                                                                  
                                                                                                                                                                                                        
- name: Ejecutar ausearch y guardar salida en un archivo                                                                                                                                                
  shell: "sudo ausearch -ua {{ uid_result.stdout }} > /tmp/audit_{{ usuario }}_{{ ipserver }}.txt"                                                                                                      
  args:                                                                                                                                                                                                 
    executable: /bin/bash                                                                                                                                                                               
  tags: report
  ignore_errors: yes

- name: Ejecutar guardar salida history del usuario {{ usuario }} en un archivo                                                                                                                                                 
  shell: "cat /home/{{ usuario }}/.bash_history > /tmp/history_{{ usuario }}_{{ ipserver }}.txt"                                                                                                      
  args:                                                                                                                                                                                                 
    executable: /bin/bash                                                                                                                                                                               
  tags: report
  ignore_errors: yes

- name: Copiar archivo a máquina local history {{ usuario }} del server {{ ipserver }}                                                                                                                                                           
  fetch:                                                                                                                                                                                                
    src: '/tmp/history_{{ usuario }}_{{ ipserver }}.txt'
    dest: '{{ dirfiles }}/audit/history_{{ usuario }}_{{ ipserver }}.txt'
    flat: yes                                                                                                                                                                                           
  tags: report                                                                                                                                                                            

- name: Copiar archivo a máquina local  reporte {{ usuario }} del server {{ ipserver }}                                                                                                                                                                 
  fetch:                                                                                                                                                                                                
    src: '/tmp/audit_{{ usuario }}_{{ ipserver }}.txt'
    dest: '{{ dirfiles }}/audit/audit_{{ usuario }}_{{ ipserver }}.txt'
    flat: yes                                                                                                                                                                                           
  tags: report

- name: Enviar confirmacion de baja de usuario
  mail:
    host: "{{ host_smtp }}"
    port: "{{ port_smtp }}"
    secure: starttls
    username: "{{ user_smtp }}"
    password: "{{ pass_smtp }}"
    from: "{{ user_smtp }}"
    to: "{{ email }}"
    subject: "Reporte usuario {{ usuario }} servidor {{ ipserver }}."
    body:  "Se genera reporte para el usuario {{ usuario }} en el sevidor con ip {{ ipserver }} el cual envia reportes detallados de comandos y accesos a este servidor"
    attach: 
      - "{{ dirfiles }}/audit/audit_{{ usuario }}_{{ ipserver }}.txt"
      - "{{ dirfiles }}/audit/audit_report_{{ usuario }}_{{ ipserver }}.txt"
      - "{{ dirfiles }}/audit/audit_filt_{{ usuario }}_{{ ipserver }}.txt"
      - "{{ dirfiles }}/audit/history_{{ usuario }}_{{ ipserver }}.txt"
  delegate_to: "{{ serverapp }}"
  tags: send-report

- name: Eliminar reportes del usuario {{ usuario }} en ip {{ ipbastion }}
  delegate_to: "{{ ipbastion }}"
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ dirfiles }}/audit/audit_{{ usuario }}_{{ ipserver }}.txt"
    - "{{ dirfiles }}/audit/audit_report_{{ usuario }}_{{ ipserver }}.txt"
    - "{{ dirfiles }}/audit/history_{{ usuario }}_{{ ipserver }}.txt"
  tags: send-report

 ######################### Eliminar usuario Server ############################

- name: Matar procesos del usuario {{ usuario }}
  command: pkill -u {{ usuario }}
  ignore_errors: yes
  when: usuario is defined  # Asegúrate de que la variable de usuario esté definida
  tags: deluser-server

- name: Eliminar usuario {{ usuario }} forzadamente
  shell: userdel -f {{ usuario }}
  ignore_errors: yes
  tags: deluser-server

# Eliminar respaldo de archivo en el server donde corre app bastion
- name: Eliminar archivo private key
  delegate_to: "{{ serverapp  }}"
  command: "rm -rf {{ dirfile }}/{{ namekey }}_{{ ipserver }}.pem && {{ dirfile }}/{{ namekey }}_{{ ipserver }}.ppk"
  args:
    warn: false # set warn=false to prevent warning
  tags: deluser-server

# Elimina el acceso principal
- name:  Eliminar archivo private key remote server 
  delegate_to: "{{ ipbastion  }}"
  file:
    path: "/home/{{ usuario }}/{{ namekey }}_{{ ipserver }}.pem"
    state: absent
  tags: deluser-server

# buscar el archivo dentro del home del user y lo elimina
- name: buscar file usuario {{ usuario }} 
  delegate_to: "{{ ipbastion  }}"
  find:
    paths: "/home/{{ usuario }}/"
    patterns: "{{ namekey }}_{{ ipserver }}.pem"
    recurse: true
  register: files_to_delete
  tags: deluser-server
 
- name: Eliminar file usuario {{ usuario }} {{ item.path }}                                                 
  delegate_to: "{{ ipbastion  }}"                                                                                                                           
  file:                                                                                     
    path: "{{ item.path }}"                                                                 
    state: absent                                                                           
  with_items: "{{ files_to_delete.files }}"                                    
  tags: deluser-server

# Envia notificacion
- name: Enviar confirmacion de baja de usuario
  mail:
    host: "{{ host_smtp }}"
    port: "{{ port_smtp }}"
    secure: starttls
    username: "{{ user_smtp }}"
    password: "{{ pass_smtp }}"
    from: "{{ user_smtp }}"
    to: "{{ email }}"
    subject: "Baja del usuario {{ usuario }} en el servidor {{ ipserver }}."
    body:  "Se elimina el siguiente usuario {{ usuario }} tipo server conocido como {{ namekey }} con IP {{ ipserver }}."
    attach: 
      - "{{ dirfiles }}/audit/audit_{{ usuario }}_{{ ipserver }}.txt"
      - "{{ dirfiles }}/audit/audit_report_{{ usuario }}_{{ ipserver }}.txt"
      - "{{ dirfiles }}/audit/audit_filt_{{ usuario }}_{{ ipserver }}.txt"
      - "{{ dirfiles }}/audit/history_{{ usuario }}_{{ ipserver }}.txt"
  delegate_to: "{{ serverapp }}"
  tags: deluser-server

- name: Eliminar reportes del usuario {{ usuario }} en ip {{ ipbastion }}
  delegate_to: "{{ ipbastion }}"
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ dirfiles }}/audit/audit_{{ usuario }}_{{ ipserver }}.txt"
    - "{{ dirfiles }}/audit/audit_report_{{ usuario }}_{{ ipserver }}.txt"
    - "{{ dirfiles }}/audit/history_{{ usuario }}_{{ ipserver }}.txt"
  tags: deluser-server

######################### Eliminar permisos de usuarios ############################

- name: Eliminar archivo private key
  file:
    path: "/home/{{ usuario }}/{{ namekey }}_{{ ipserver }}.pem"
    state: absent
  tags: delete-permission

######################### Solo agregar usuario con PEM file  ############################

- name: Crear grupos que pertenecen al usuario {{ usuario }}
  group:
    name: "{{ item }}"
    state: present
  with_items: "{{ grupos }}"
  tags: adduser-host
  ignore_errors: yes

- name: Crear el directorio de inicio del usuario
  file:
    path: "/home/{{ usuario }}"
    state: directory
    owner: "{{ usuario }}"
    group: "{{ usuario }}"
    mode: 0700
  tags: adduser-host

- name: Creando el nuevo usuario {{ usuario }} con ssh-keygen tipo server
  user:
    name: "{{ usuario }}"
    groups: "{{ usuario }}"
    comment: encontrack sa de cv
    generate_ssh_key: yes
    ssh_key_type: rsa
    ssh_key_bits: 4096
    ssh_key_file: "/home/{{ usuario }}/.ssh/{{ namekey }}_{{ ipserver }}.pem"
    home: "/home/{{ usuario }}"
  tags: adduser-host

- name: Agregar el usuario a grupos
  user:
    name: "{{ usuario }}"
    groups: "{{ item }}"
    append: yes
  with_items: "{{ grupos }}"
  tags: adduser-host
  ignore_errors: yes

- name: Respaldar archivo a mi servidor local private key tipo server
  fetch:
    src: "/home/{{ usuario }}/.ssh/{{ namekey }}_{{ ipserver }}.pem"
    dest: "{{ dirfile }}/{{ namekey }}_{{ ipserver }}.pem"
    flat: yes
    owner: "{{ admin_user }}"
    group: "{{ admin_user }}"
    mode: 0600
  tags: adduser-host

- name: Respaldar archivo a mi servidor local public key tipo server
  fetch:
    src: "/home/{{ usuario }}/.ssh/{{ namekey }}_{{ ipserver }}.pem.pub"
    dest: "{{ dirfile }}/{{ namekey }}_{{ ipserver }}.ppk"
    flat: yes
    owner: "{{ admin_user }}"
    group: "{{ admin_user }}"
    mode: 0600
  tags: adduser-host

- name: Gerando la autenticacion de archivo certificado bastion_hosts_{{ usuario }}.pem. tipo server
  authorized_key:
    user: "{{ usuario }}"
    state: present
    key: "{{ lookup('file', '{{ dirfile }}/{{ namekey }}_{{ ipserver }}.ppk') }}"
  tags: adduser-host

- name: Enviar archivo pem al usuario por mail tipo server
  mail:
    host: "{{ host_smtp }}"
    port: "{{ port_smtp }}"
    secure: starttls
    username: "{{ user_smtp }}"
    password: "{{ pass_smtp }}"
    from: "{{ user_smtp }}"
    to: "{{ email }}"
    subject: "Notificacion de alta bastion-server"
    body:  "Este es un correo para informarte que el usuario {{ usuario }} fue creado en el servidor {{ namekey }} con IP privada {{ ipserver }} \n\nEjecuta el siguiente comando desde tu home en en el server BastionHost:\n ssh -i {{ namekey }}_{{ ipserver }}.pem {{ ipserver }} "
  delegate_to: "{{ serverapp }}"
  tags: adduser-host

######################### Agregar permisos de usuarios ############################

- name: Copia archivo private key
  delegate_to: "{{ ipbastion  }}"
  copy:
    src: "{{ dirfile }}/{{ namekey }}_{{ ipserver }}.pem"
    dest: "/home/{{ usuario }}/{{ namekey }}_{{ ipserver }}.pem"
    owner: "{{ usuario }}"
    group: "root"
    mode: '600'
  tags: permissions

######################### Modificar nuevos cambios a registros ############################

- name: Renombrar archivos en el server local de respaldo
  delegate_to: "{{ serverapp }}"
  command: mv "{{ dirfile }}/{{ item.usuario }}/{{ namekey }}_{{ ipserver }}.pem" "{{ dirfile }}/{{ item.usuario }}/{{ nombre_clave_nueva }}_{{ nueva_ip_servidor }}.pem"
  with_items:
    - "{{ usuarios }}"
  tags: update-data

- name: Renombrar archivos en el server local de respaldo ppk
  delegate_to: "{{ serverapp }}"
  command: mv "{{ dirfile }}/{{ item.usuario }}/{{ namekey }}_{{ ipserver }}.ppk" "{{ dirfile }}/{{ item.usuario }}/{{ nombre_clave_nueva }}_{{ nueva_ip_servidor }}.ppk"
  with_items:
    - "{{ usuarios }}"
  tags: update-data

- name: Renombrar archivos en el bastion
  command: mv "/home/{{ item.usuario }}/{{ namekey }}_{{ ipserver }}.pem" "/home/{{ item.usuario }}/{{ nombre_clave_nueva }}_{{ nueva_ip_servidor }}.pem"
  with_items:
    - "{{ usuarios }}"
  tags: update-data

######################### Modificar nueva ip y generar los accesos  ############################

- name: Eliminar archivo de clave privada en bastion
  delegate_to: "{{ ipbastion  }}"
  file:
    path: "/home/{{ item.usuario }}/{{ namekey }}_{{ ipserver }}.pem"
    state: absent
  with_items:
    - "{{ usuarios }}"
  tags: update_ip

- name: Eliminar archivo de clave privada respaldo local pem
  delegate_to: "{{ serverapp  }}"
  file:
    path: "{{ dirfile }}/{{ item.usuario }}/{{ namekey }}_{{ ipserver }}.pem"
    state: absent
  with_items:
    - "{{ usuarios }}"
  tags: update_ip

- name: Eliminar archivo de clave privada respaldo local pem.pub
  delegate_to: "{{ serverapp  }}"
  file:
    path: "{{ dirfile }}/{{ item.usuario }}/{{ namekey }}_{{ ipserver }}.ppk"
    state: absent
  with_items:
    - "{{ usuarios }}"
  tags: update_ip

- name: buscar archivo de usuario pem para eliminar
  delegate_to: "{{ ipbastion }}"
  find:
    paths: "/home/{{ item.usuario }}/"
    patterns: "{{ namekey }}_{{ ipserver }}.pem"
    recurse: true
  loop: "{{ usuarios }}"
  register: files_to_delete
  tags: update_ip

- name: Eliminar archivo de usuario que se buscaron
  delegate_to: "{{ ipbastion }}"
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ files_to_delete.results }}"
  when: item.path is defined
  tags: update_ip

- name: Crear el grupo {{ item.grupo }}
  group:
    name: "{{ item.grupo }}"
    state: present
  with_items:
    - "{{ usuarios }}"
  tags: update_ip

- name: Creando los nuevos usuarios con ssh-keygen tipo server
  user:
    name: "{{ item.usuario }}"
    group: "{{ item.grupo }}"
    comment: encontrack sa de cv
    generate_ssh_key: yes
    ssh_key_type: rsa
    ssh_key_bits: 4096
    ssh_key_file: "/home/{{ item.usuario }}/.ssh/{{ nombre_clave_nueva }}_{{ nueva_ip_servidor }}.pem"
  loop: "{{ usuarios }}"
  tags: update_ip

- name: Respaldar archivo de clave privada en servidor local
  fetch:
    src: "/home/{{ item.usuario }}/.ssh/{{ nombre_clave_nueva }}_{{ nueva_ip_servidor }}.pem"
    dest: "{{ dirfile }}/{{ item.usuario }}/{{ nombre_clave_nueva }}_{{ nueva_ip_servidor }}.pem"
    flat: yes
    owner: "{{ admin_user }}"
    group: "{{ admin_user }}"
    mode: '0600'
  with_items:
    - "{{ usuarios }}"
  tags: update_ip

- name: Respaldar archivo de clave pública en servidor local
  fetch:
    src: "/home/{{ item.usuario }}/.ssh/{{ nombre_clave_nueva }}_{{ nueva_ip_servidor }}.pem.pub"
    dest: "{{ dirfile }}/{{ item.usuario }}/{{ nombre_clave_nueva }}_{{ nueva_ip_servidor }}.ppk"
    flat: yes
    owner: "{{ admin_user }}"
    group: "{{ admin_user }}"
    mode: '0600'
  with_items:
    - "{{ usuarios }}"
  tags: update_ip

- name: Generar la autenticación del archivo de certificado bastion_hosts_{{ item.usuario }}.pem
  authorized_key:
    user: "{{ item.usuario }}"
    state: present
    key: "{{ lookup('file', '{{ dirfile }}/{{ item.usuario }}/{{ nombre_clave_nueva }}_{{ nueva_ip_servidor }}.ppk') }}"
  with_items:
    - "{{ usuarios }}"
  tags: update_ip

- name: Agregar permisos sudo al grupo {{ item.grupo }}
  lineinfile:
    path: /etc/sudoers
    regexp: '^%{{ item.grupo }}\tALL=(ALL)       NOPASSWD: ALL'
    line: '%{{ item.grupo }}      ALL=(ALL)       NOPASSWD: ALL'
  with_items:
    - "{{ usuarios }}"
  tags: update_ip

- name: Copia archivo private key al bastion
  delegate_to: "{{ ipbastion  }}"
  copy:
    src: "{{ dirfile }}/{{ item.usuario }}/{{ nombre_clave_nueva }}_{{ nueva_ip_servidor }}.pem"
    dest: "/home/{{ item.usuario }}/{{ nombre_clave_nueva }}_{{ nueva_ip_servidor }}.pem"
    owner: "{{ item.usuario }}"
    group: "{{ item.grupo }}"
    mode: '600'
  with_items:
    - "{{ usuarios }}"
  tags: update_ip

########################### obtener datos de servidores #######################################3

- name: Eliminar archivo si existe
  file:
    path: "/tmp/resultados_{{ namekeyserver }}.json"
    state: absent
  tags: update-resources

- name: Crear archivo de resultados
  file:
    path: /tmp/resultados_{{ namekeyserver }}.json
    state: touch
    owner: "{{ admin_user }}"
    group: "{{ admin_user }}"
  tags: update-resources

- name: Mostrar información de la RAM
  debug:
    var: ansible_memtotal_mb
  register: ram_result
  tags: update-resources

- name: Mostrar información de la CPU
  debug:
    var: ansible_processor
  register: cpu_result
  tags: update-resources

- name: Mostrar información del almacenamiento
  debug:
    var: ansible_devices
  register: storage_result
  tags: update-resources

- name: Mostrar información del sistema operativo
  debug:
    var: ansible_distribution
  register: os_result
  tags: update-resources

- name: Mostrar información sobre el tipo de servidor
  debug:
    var: ansible_virtualization_type
  register: server_type_result
  tags: update-resources

# Resto de las tareas para obtener los resultados de CPU, almacenamiento, sistema operativo y tipo de servidor

- name: Guardar resultados en archivo
  blockinfile:
    path: "/tmp/resultados_{{ namekeyserver }}.json"
    block: |
      RAM Result:
      {{ ram_result | default('Not available') | to_nice_json }}

      CPU Result:
      {{ cpu_result | default('Not available') | to_nice_json }}

      Storage Result:
      {{ storage_result | default('Not available') | to_nice_json }}

      OS Result:
      {{ os_result | default('Not available') | to_nice_json }}

      Server Type Result:
      {{ server_type_result | default('Not available') | to_nice_json }}
  tags: [update-resources]

- name: Buscar y reemplazar palabras en archivo
  lineinfile:
    path: "/tmp/resultados_{{ namekeyserver }}.json"
    regexp: '{{ item.wrd }}'
    line: '{{ item.res }}'
  with_items:
    - { wrd: "OS Result:", res: ',"os_res": ' }
    - { wrd: "Server Type Result:", res: ',"ser_res": ' }
    - { wrd: "Storage Result:", res: ',"store_res": ' }
    - { wrd: "CPU Result:", res: ',"cpu_res": ' }
    - { wrd: "RAM Result:", res: '"ram_res": ' }
    - { wrd: "# BEGIN ANSIBLE MANAGED BLOCK", res: "{" }
    - { wrd: "# END ANSIBLE MANAGED BLOCK", res: "}" }
  tags: update-resources

- name: Copiar archivo del servidor al sistema local
  fetch:
    src: "/tmp/resultados_{{ namekeyserver }}.json"
    dest: "/tmp/resultados_{{ namekeyserver }}.json"
    flat: yes
  tags: update-resources

########################################## GruposPoliticas-roles #####################################

- name: Crear una copia de seguridad del archivo sudoers
  command: cp /etc/sudoers /etc/sudoers.bak
  tags: policy-sudo

- name: Copiar archivo sudoers
  copy:
    src: '{{ dirfiles }}/../app/ansible/roles/manageCustomUsers/files/sudoers'
    dest: /etc/sudoers
    owner: root
    group: root
    mode: 0440
  tags: policy-sudo

################################################ User-roles ##########################################

- name: Crear una copia de seguridad del archivo sudoers
  command: cp /etc/sudoers /etc/sudoers.bak
  tags: role-sudo

- name: Copiar archivo sudoers
  copy:
    src: '{{ dirfiles }}/../app/ansible/roles/manageCustomUsers/files/sudoers'
    dest: /etc/sudoers
    owner: root
    group: root
    mode: 0440
  tags: role-sudo

- name: "Crear grupos que pertenecen al usuario {{ usuario }}"
  group:
    name: "{{ item }}"
    state: present
  with_items: 
    - "{{grupos}}"
  tags: role-sudo
  ignore_errors: yes
  
- name: Modificar grupos del "{{ usuario }}"
  user:
    name: "{{ usuario }}"
    groups: "{{ grupos }}"
    append: no
  tags: role-sudo
  ignore_errors: yes
  
##################################################################################################

- name: Remove user from unnecessary groups
  user:
    name: "{{ usuario }}"
    groups: "{{grupos}}"
    append: no
  tags: deleterole-sudo
  ignore_errors: yes